import { askGPTWithMenu, cacheAnswer, fuzzySearchData, getAllRelevantKeywords, getCommonQuestionAnswer, getConversationHistory, getSimilarQuestion, saveConversation } from "../services/AiService";

interface GPTResponse {
    menu: Array<{
      _id: string;
      name: string;
      price: string;
    }>;
  }
  
  /**
   * ü§ñ T·∫°o ph·∫£n h·ªìi t·ª´ AI
   * @param userId ID ng∆∞·ªùi d√πng
   * @param message Tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
   * @returns Ph·∫£n h·ªìi t·ª´ AI (c√≥ th·ªÉ l√† chu·ªói ho·∫∑c JSON)
   */
  export async function generateAIResponse(userId: string, message: string): Promise<string> {
    // Ki·ªÉm tra c√¢u tr·∫£ l·ªùi t·ª´ danh s√°ch c√¢u h·ªèi ph·ªï bi·∫øn
    const commonAnswer = getCommonQuestionAnswer(message);
    if (commonAnswer) return commonAnswer;
  
    // Ki·ªÉm tra cache tr·∫£ l·ªùi t·ª´ Redis
    const cachedReply = await getSimilarQuestion(message);
    if (cachedReply) {
      console.log("‚úÖ L·∫•y ph·∫£n h·ªìi t·ª´ Redis Cache");
      return cachedReply;
    }
  
    // T·ªïng h·ª£p t·ª´ kh√≥a t·ª´ n·ªôi dung c√¢u h·ªèi
    const keywords = await getAllRelevantKeywords(message);
    console.log("üîç T·ªïng h·ª£p t·ª´ kh√≥a:", keywords);
  
    let matchedItems: any[] = [];
    // T√¨m ki·∫øm d·ªØ li·ªáu m√≥n ƒÉn t·ª´ c√°c t·ª´ kh√≥a
    for (const keyword of keywords) {
      const results = await fuzzySearchData(keyword);
      matchedItems.push(...results);
    }
  
    // Lo·∫°i b·ªè c√°c m√≥n ƒÉn tr√πng l·∫∑p
    matchedItems = matchedItems.filter((item, index, self) =>
      index === self.findIndex((t) => t._id.toString() === item._id.toString())
    );
  
    if (matchedItems.length === 0) {
      return "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y m√≥n ƒÉn ph√π h·ª£p trong menu.";
    }
  
    // ƒê·ªãnh d·∫°ng danh s√°ch m√≥n ƒÉn
    const formattedMenu = matchedItems.map((item) => {
      const _id = item._id.toString();
      const name = item.name || "Kh√¥ng t√™n";
      const description = item.description || "Kh√¥ng c√≥ m√¥ t·∫£";
      const category = item.category?.categoryName || "Kh√¥ng r√µ";
      const price = item.price || "Kh√¥ng c√≥ gi√°";
      const imageUrl = item.imageUrl || "";
      return `${_id}. ${name} - ${description} (Ph√¢n lo·∫°i: ${category}) - Gi√°: ${price} - ·∫¢nh: ${imageUrl}`;
    }).join("\n");
  
    // L·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i
    const history = await getConversationHistory(userId);
    // G·ªçi OpenAI ƒë·ªÉ l·∫•y ph·∫£n h·ªìi
    const reply = await askGPTWithMenu(history, formattedMenu, message);
  
    if (!reply) throw new Error("OpenAI kh√¥ng tr·∫£ v·ªÅ ph·∫£n h·ªìi h·ª£p l·ªá.");
    console.log("ü§ñ OpenAI ph·∫£n h·ªìi:", reply);
  
    // L∆∞u h·ªôi tho·∫°i v√†o Redis
    await saveConversation(userId, "user", message);
    await saveConversation(userId, "assistant", typeof reply === 'string' ? reply : JSON.stringify(reply));

    // Cache k·∫øt qu·∫£ v√†o Redis
    await cacheAnswer(message, reply);
  
    return typeof reply === 'object' ? JSON.stringify(reply) : reply;
  }